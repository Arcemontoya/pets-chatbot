import boto3
import os
from datetime import datetime

dynamodb = boto3.resource('dynamodb')
table_name = os.environ.get('USERS_TABLE')
table = dynamodb.Table(table_name)


def lambda_handler(event, context):
    """Se ejecuta después de que un usuario se confirma en Cognito."""
    try:
        attrs = event.get("request", {}).get("userAttributes", {})
        user_id = attrs.get("sub") or event.get("userName")
        email = attrs.get("email")
        name = attrs.get("name")

        if not table_name:
            print("⚠️ USERS_TABLE no está definido en las variables de entorno.")
            return event

        item = {
            "userId": user_id,
            "email": email,
            "name": name,
            "createdAt": datetime.utcnow().isoformat()
        }

        # Intentar insertar solo si el usuario no existe
        try:
            table.put_item(
                Item=item,
                ConditionExpression="attribute_not_exists(userId)"
            )
            print(f"✅ Usuario guardado en DynamoDB: {user_id}")
        except table.meta.client.exceptions.ConditionalCheckFailedException:
            print(f"ℹ️ Usuario ya existía: {user_id}")
        except Exception as e:
            print(f"❌ Error guardando en DynamoDB: {e}")

        return event  # Cognito requiere que se devuelva el evento original
    except Exception as e:
        print(f"❌ Error general en PostConfirmation: {e}")
        return event
