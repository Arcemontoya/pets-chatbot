AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM template con Cognito (login/registro) y DynamoDB (almacenamiento de chats).
  Usa una Lambda PostConfirmation en Python 3.12.

Globals:
  Function:
    Timeout: 10
    Runtime: python3.12

Resources:

  # --------------------------------------- [API] ---------------------------------------
  ChatApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-ChatApi"
      StageName: Prod
      Cors:
        AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"

  # --------------------------------------- [SINGLE TABLE DESIGN CHATBOT] ---------------------------------------
  PetsChatbotTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-chatdata"
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  # --------------------------------------- [API CREACION DE NUEVOS CHATS] ---------------------------------------
  ChatApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-new-chat-api"
      Description: "API para crear chats en DynamoDB"
      CodeUri: backend/chat_api/
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          CHAT_TABLE: !Ref PetsChatbotTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PetsChatbotTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /chats
            Method: POST
            RestApiId: !Ref ChatApi

  # --------------------------------------- [COGNITO USER POOL + CLIENTE] ---------------------------------------
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-UserPool"
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      MfaConfiguration: "OFF"
      Schema:
        - Name: email
          Required: true
          Mutable: true
      LambdaConfig:
        PostConfirmation: !GetAtt PostConfirmationFunction.Arn

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${AWS::StackName}-UserPoolClient"
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
      PreventUserExistenceErrors: ENABLED
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 30

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${AWS::StackName}-auth-domain"
      UserPoolId: !Ref CognitoUserPool

  # --------------------------------------- [IDENTITY POOL - PARA CREDENCIALES AWS TEMPORALES] ---------------------------------------
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${AWS::StackName}-IdentityPool"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName

  CognitoIdentityPoolAuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-CognitoAuthRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
              "ForAnyValue:StringLike":
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: CognitoAuthorizedPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource: !GetAtt PetsChatbotTable.Arn

  CognitoIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt CognitoIdentityPoolAuthRole.Arn

  # --------------------------------------- [LAMBDA POST CONFIRMATION] ---------------------------------------
  PostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-PostConfirmation"
      Description: "Post confirmation trigger - l√≥gica adicional tras registro de usuario"
      CodeUri: backend/post_confirmation/
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 10
      MemorySize: 128
      Policies:
        - AWSLambdaBasicExecutionRole

  AllowCognitoInvokePostConfirmation:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PostConfirmationFunction
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

# --------------------------------------- [OUTPUTS] ---------------------------------------
Outputs:
  UserPoolId:
    Description: "ID del User Pool"
    Value: !Ref CognitoUserPool
  UserPoolClientId:
    Description: "Client ID del User Pool"
    Value: !Ref CognitoUserPoolClient
  IdentityPoolId:
    Description: "ID del Identity Pool"
    Value: !Ref CognitoIdentityPool
  PostConfirmationFunctionName:
    Description: "Lambda PostConfirmation"
    Value: !Ref PostConfirmationFunction
  ChatTableName:
    Description: "Tabla DynamoDB para chats y mensajes"
    Value: !Ref PetsChatbotTable
  ChatApiUrl:
    Description: "Endpoint de la API para crear chats"
    Value: !Sub "https://${ChatApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/chats"
